{"code":"import { isObject } from \"@vue/shared\";\r\nimport { mutableHandlers, shallowReactiveHandlers, readonlyHandlers, shallowReadonlyHandlers } from \"./baseHandlers\";\r\nexport function reactive(target) {\r\n    return createReactiveObject(target, false, mutableHandlers);\r\n}\r\nexport function shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers);\r\n}\r\nexport function readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers);\r\n}\r\nexport function shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers);\r\n}\r\n// 是不是仅读，是不是深度，是不是柯里化 new Proxy () 最核心的需要拦截，数据的读取和数据的修改\r\nconst reactiveMap = new WeakMap(); //会自动垃圾回收，不会造成内存泄露，存储的key只能是对象\r\nconst readonlyMap = new WeakMap();\r\nexport function createReactiveObject(target, isReadonly, baseHandlers) {\r\n    // 如果目标不是对象 没法拦截了reactive 这个api只能拦截对象类型\r\n    if (isObject(target)) {\r\n        return target;\r\n    }\r\n    // 如果某个对象已经代理过了 就不代理 可能一个对象 被代理是深度， 又仅读代理\r\n    const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n    const exisitProxy = proxyMap.get(target);\r\n    if (exisitProxy) {\r\n        return exisitProxy;\r\n    }\r\n    const proxy = new Proxy(target, baseHandlers);\r\n    proxyMap.set(target, proxy); //将要代理的对象和对应代理结果缓存起来\r\n    return proxy;\r\n}\r\n","references":["D:/学习/学习计划/Study-Vue3/vue3/packages/shared/src/index.ts","D:/学习/学习计划/Study-Vue3/vue3/packages/reactivity/src/baseHandlers.ts"]}
